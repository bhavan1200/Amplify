{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from '@reduxjs/toolkit';\nvar initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!',\n  user: \"123\"\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text',\n  user: \"124\"\n}];\nvar postsSlice = createSlice({\n  name: 'posts',\n  initialState: initialState,\n  reducers: {\n    postAdded: {\n      reducer: function reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare: function prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title: title,\n            content: content,\n            user: userId,\n            date: new Date().toISOString()\n          }\n        };\n      }\n    },\n    postUpdated: function postUpdated(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          title = _action$payload.title,\n          content = _action$payload.content;\n      var existingPost = state.find(function (post) {\n        return post.id === id;\n      });\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nvar _postsSlice$actions = postsSlice.actions,\n    postAdded = _postsSlice$actions.postAdded,\n    postUpdated = _postsSlice$actions.postUpdated;\nexport { postAdded, postUpdated };\nexport default postsSlice.reducer;","map":{"version":3,"sources":["C:/Users/bhavan/Project/features/post/postSlice.js"],"names":["createSlice","nanoid","initialState","id","title","content","user","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","date","Date","toISOString","postUpdated","existingPost","find","post","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,IAAMC,YAAY,GAAG,CACjB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,QAA1C;AAAoDC,EAAAA,IAAI,EAAC;AAAzD,CADiB,EAEjB;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,WAA1C;AAAuDC,EAAAA,IAAI,EAAC;AAA5D,CAFiB,CAArB;AAME,IAAMC,UAAU,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,OADuB;AAE7BN,EAAAA,YAAY,EAAZA,YAF6B;AAG7BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OADS,mBACDC,KADC,EACMC,MADN,EACc;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHQ;AAITC,MAAAA,OAJS,mBAIDZ,KAJC,EAIMC,OAJN,EAIeY,MAJf,EAIuB;AAC9B,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPZ,YAAAA,EAAE,EAAEF,MAAM,EADH;AAEPG,YAAAA,KAAK,EAALA,KAFO;AAGPC,YAAAA,OAAO,EAAPA,OAHO;AAIPC,YAAAA,IAAI,EAAEW,MAJC;AAKPC,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX;AALC;AADJ,SAAP;AASD;AAdQ,KADH;AAiBRC,IAAAA,WAjBQ,uBAiBIT,KAjBJ,EAiBWC,MAjBX,EAiBmB;AACzB,4BAA+BA,MAAM,CAACE,OAAtC;AAAA,UAAQZ,EAAR,mBAAQA,EAAR;AAAA,UAAYC,KAAZ,mBAAYA,KAAZ;AAAA,UAAmBC,OAAnB,mBAAmBA,OAAnB;AACA,UAAMiB,YAAY,GAAGV,KAAK,CAACW,IAAN,CAAW,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACrB,EAAL,KAAYA,EAAhB;AAAA,OAAf,CAArB;;AACA,UAAImB,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAAClB,KAAb,GAAqBA,KAArB;AACAkB,QAAAA,YAAY,CAACjB,OAAb,GAAuBA,OAAvB;AACD;AACF;AAxBO;AAHmB,CAAD,CAA9B;AA+BK,0BAAkCE,UAAU,CAACkB,OAA7C;AAAA,IAAQf,SAAR,uBAAQA,SAAR;AAAA,IAAmBW,WAAnB,uBAAmBA,WAAnB;;AACP,eAAed,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice} from \"@reduxjs/toolkit\";\r\nimport { nanoid } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = [\r\n    { id: '1', title: 'First Post!', content: 'Hello!', user:\"123\" },\r\n    { id: '2', title: 'Second Post', content: 'More text', user:\"124\" }\r\n  ]\r\n\r\n\r\n  const postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n      postAdded: {\r\n        reducer(state, action) {\r\n          state.push(action.payload)\r\n        },\r\n        prepare(title, content, userId) {\r\n          return {\r\n            payload: {\r\n              id: nanoid(),\r\n              title,\r\n              content,\r\n              user: userId,\r\n              date: new Date().toISOString(),\r\n            }\r\n          }\r\n        }\r\n      },\r\n      postUpdated(state, action) {\r\n        const { id, title, content } = action.payload\r\n        const existingPost = state.find(post => post.id === id)\r\n        if (existingPost) {\r\n          existingPost.title = title\r\n          existingPost.content = content\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\nexport const { postAdded, postUpdated} = postsSlice.actions;\r\nexport default postsSlice.reducer\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}