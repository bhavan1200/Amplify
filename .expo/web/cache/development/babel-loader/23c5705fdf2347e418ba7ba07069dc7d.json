{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\bhavan\\\\Project\\\\components\\\\ChatListItem\\\\index.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport styles from \"./style\";\nimport moment from \"moment\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Auth } from \"aws-amplify\";\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n              console.log(chatRoom.chatRoomUsers.items[0].user.id);\n\n              if (chatRoom.chatRoomUsers.items[1].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n\n  var onClick = function onClick() {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: otherUser.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: onClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.leftContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: otherUser.imageUri\n    },\n    style: styles.avatar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.midContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.username,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, otherUser.name), React.createElement(Text, {\n    numberOfLines: 2,\n    style: styles.lastMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, chatRoom.lastMessage ? chatRoom.lastMessage.content : \" \"))), React.createElement(Text, {\n    style: styles.time,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\"))));\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["C:/Users/bhavan/Project/components/ChatListItem/index.tsx"],"names":["React","useEffect","useState","styles","moment","useNavigation","Auth","ChatListItem","props","chatRoom","otherUser","setOtherUser","navigation","getOtherUser","currentAuthenticatedUser","userInfo","console","log","chatRoomUsers","items","user","id","attributes","sub","onClick","navigate","name","container","leftContainer","uri","imageUri","avatar","midContainer","username","lastMessage","content","time","createdAt","format"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;AAGA,OAAOC,MAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,IAAT,QAAqB,aAArB;;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA8B;AACjD,MAAQC,QAAR,GAAqBD,KAArB,CAAQC,QAAR;;AACA,kBAAkCP,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,UAAU,GAAGP,aAAa,EAAhC;AAGAJ,EAAAA,SAAS,CAAC,YAAM;AACb,QAAMY,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACCP,IAAI,CAACQ,wBAAL,EADD;;AAAA;AAChBC,cAAAA,QADgB;AAEtBC,cAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAhC,CAAqCC,EAAjD;;AAEA,kBAAGZ,QAAQ,CAACS,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAhC,CAAqCC,EAArC,KAA4CN,QAAQ,CAACO,UAAT,CAAoBC,GAAnE,EAAuE;AACpEZ,gBAAAA,YAAY,CAACF,QAAQ,CAACS,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAjC,CAAZ;AACF,eAFD,MAEM;AACJT,gBAAAA,YAAY,CAACF,QAAQ,CAACS,aAAT,CAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,IAAjC,CAAZ;AAEA;;AAToB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAWAP,IAAAA,YAAY;AACd,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAMW,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBZ,IAAAA,UAAU,CAACa,QAAX,CAAoB,UAApB,EAAgC;AAC9BJ,MAAAA,EAAE,EAAEZ,QAAQ,CAACY,EADiB;AAE9BK,MAAAA,IAAI,EAAEhB,SAAS,CAACgB;AAFc,KAAhC;AAID,GALD;;AAOA,MAAG,CAAChB,SAAJ,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEc,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErB,MAAM,CAACwB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExB,MAAM,CAACyB,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEnB,SAAS,CAACoB;AAAjB,KAAf;AAA4C,IAAA,KAAK,EAAE3B,MAAM,CAAC4B,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE5B,MAAM,CAAC6B,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE7B,MAAM,CAAC8B,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BvB,SAAS,CAACgB,IAAzC,CADF,EAEE,oBAAC,IAAD;AAAM,IAAA,aAAa,EAAE,CAArB;AAAwB,IAAA,KAAK,EAAEvB,MAAM,CAAC+B,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzB,QAAQ,CAACyB,WAAT,GAAuBzB,QAAQ,CAACyB,WAAT,CAAqBC,OAA5C,GAAsD,GADzD,CAFF,CAHF,CADF,EAYE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhC,MAAM,CAACiC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE3B,QAAQ,CAACyB,WAAT,IAAwB9B,MAAM,CAACK,QAAQ,CAACyB,WAAT,CAAqBG,SAAtB,CAAN,CAAuCC,MAAvC,CAA8C,YAA9C,CAD1B,CAZF,CADF,CADF;AAoBD,CArDD;;AAuDA,eAAe/B,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, Text, Image, TouchableWithoutFeedback } from \"react-native\";\r\nimport { ChatRoom } from \"../../types\";\r\nimport styles from \"./style\";\r\nimport moment from \"moment\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { Auth } from \"aws-amplify\";\r\n\r\nexport type ChatListItemProps = {\r\n    chatRoom: ChatRoom;\r\n  }\r\n\r\nconst ChatListItem = (props: ChatListItemProps) => {\r\n  const { chatRoom } = props;\r\n  const [otherUser, setOtherUser] = useState(null);\r\n\r\n  const navigation = useNavigation();\r\n\r\n\r\n  useEffect(() => {\r\n     const getOtherUser = async () => {\r\n    const userInfo = await Auth.currentAuthenticatedUser();\r\n    console.log(chatRoom.chatRoomUsers.items[0].user.id);\r\n\r\n    if(chatRoom.chatRoomUsers.items[1].user.id === userInfo.attributes.sub){\r\n       setOtherUser(chatRoom.chatRoomUsers.items[0].user)\r\n    } else{\r\n      setOtherUser(chatRoom.chatRoomUsers.items[0].user)\r\n\r\n     }\r\n    }\r\n     getOtherUser();\r\n  }, []) \r\n\r\n  const onClick = () => {\r\n    navigation.navigate('ChatRoom', {\r\n      id: chatRoom.id,\r\n      name: otherUser.name\r\n    })\r\n  }\r\n\r\n  if(!otherUser){\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <TouchableWithoutFeedback onPress={onClick}>\r\n      <View style={styles.container}>\r\n        <View style={styles.leftContainer}>\r\n          <Image source={{ uri: otherUser.imageUri }} style={styles.avatar} />\r\n\r\n          <View style={styles.midContainer}>\r\n            <Text style={styles.username}>{otherUser.name}</Text>\r\n            <Text numberOfLines={2} style={styles.lastMessage}>\r\n              {chatRoom.lastMessage ? chatRoom.lastMessage.content : \" \"}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        <Text style={styles.time}>\r\n         {chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}\r\n        </Text>\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};\r\n\r\nexport default ChatListItem;\r\n"]},"metadata":{},"sourceType":"module"}