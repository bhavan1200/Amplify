{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\bhavan\\\\Project\\\\screens\\\\ChatRoomScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { useRoute } from '@react-navigation/native';\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { messagesByChatRoom } from \"../src/graphql/queries\";\nimport { onCreateMessage } from \"../src/graphql/subscriptions\";\nimport ChatMessage from \"../components/ChatMessage\";\nimport BG from \"../assets/images/BG.png\";\nimport InputBox from \"../components/InputBox\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n\n  var fetchMessages = function fetchMessages() {\n    var messagesData;\n    return _regeneratorRuntime.async(function fetchMessages$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n              chatRoomID: route.params.id,\n              sortDirection: \"DESC\"\n            })));\n\n          case 2:\n            messagesData = _context.sent;\n            console.log(\"FETCH MESSAGES\");\n            setMessages(messagesData.data.messagesByChatRoom.items);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          console.log(\"Message is in another room!\");\n          return;\n        }\n\n        fetchMessages();\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  console.log(\"messages in state: \" + messages.length);\n  return React.createElement(ImageBackground, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    source: BG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(ChatMessage, {\n        myId: myId,\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 35\n        }\n      });\n    },\n    inverted: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), React.createElement(InputBox, {\n    chatRoomID: route.params.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["C:/Users/bhavan/Project/screens/ChatRoomScreen.js"],"names":["React","useEffect","useState","useRoute","API","graphqlOperation","Auth","messagesByChatRoom","onCreateMessage","ChatMessage","BG","InputBox","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messagesData","console","log","data","items","getMyId","currentAuthenticatedUser","userInfo","attributes","sub","subscription","subscribe","next","newMessage","value","unsubscribe","length","width","height","item"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {FlatList, Text, ImageBackground, KeyboardAvoidingView } from 'react-native';\r\n\r\nimport { useRoute } from '@react-navigation/native';\r\nimport {\r\n  API,\r\n  graphqlOperation,\r\n  Auth,\r\n} from 'aws-amplify';\r\n\r\nimport { messagesByChatRoom } from '../src/graphql/queries';\r\nimport { onCreateMessage } from '../src/graphql/subscriptions';\r\n\r\n\r\nimport ChatMessage from \"../components/ChatMessage\";\r\nimport BG from '../assets/images/BG.png';\r\nimport InputBox from \"../components/InputBox\";\r\n\r\nconst ChatRoomScreen = () => {\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [myId, setMyId] = useState(null);\r\n\r\n  const route = useRoute();\r\n\r\n  const fetchMessages = async () => {\r\n    const messagesData = await API.graphql(\r\n      graphqlOperation(\r\n        messagesByChatRoom, {\r\n          chatRoomID: route.params.id,\r\n          sortDirection: \"DESC\",\r\n        }\r\n      )\r\n    )\r\n\r\n    console.log(\"FETCH MESSAGES\")\r\n    setMessages(messagesData.data.messagesByChatRoom.items);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const getMyId = async () => {\r\n      const userInfo = await Auth.currentAuthenticatedUser();\r\n      setMyId(userInfo.attributes.sub);\r\n    }\r\n    getMyId();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const subscription = API.graphql(\r\n      graphqlOperation(onCreateMessage)\r\n    ).subscribe({\r\n      next: (data) => {\r\n        const newMessage = data.value.data.onCreateMessage;\r\n\r\n        if (newMessage.chatRoomID !== route.params.id) {\r\n          console.log(\"Message is in another room!\")\r\n          return;\r\n        }\r\n\r\n        fetchMessages();\r\n        // setMessages([newMessage, ...messages]);\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [])\r\n\r\n  console.log(`messages in state: ${messages.length}`)\r\n\r\n  return (\r\n    <ImageBackground style={{width: '100%', height: '100%'}} source={BG}>\r\n      <FlatList\r\n        data={messages}\r\n        renderItem={({ item }) => <ChatMessage myId={myId} message={item} />}\r\n        inverted\r\n      />\r\n\r\n      <InputBox chatRoomID={route.params.id} />\r\n    </ImageBackground>\r\n  );\r\n}\r\n\r\nexport default ChatRoomScreen;"]},"metadata":{},"sourceType":"module"}