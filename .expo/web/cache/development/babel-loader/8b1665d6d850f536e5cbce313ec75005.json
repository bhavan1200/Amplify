{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavan\\\\Project\\\\src\\\\containers\\\\AllPosts.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport API, { graphqlOperation } from '@aws-amplify/api';\nimport { listPostsSortedByTimestamp } from \"../graphql/queries\";\nimport { onCreatePost } from \"../graphql/subscriptions\";\nimport PostList from \"../components/PostLists\";\nimport Sidebar from \"./Sidebar\";\nvar SUBSCRIPTION = 'SUBSCRIPTION';\nvar INITIAL_QUERY = 'INITIAL_QUERY';\nvar ADDITIONAL_QUERY = 'ADDITIONAL_QUERY';\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case INITIAL_QUERY:\n      return action.posts;\n\n    case ADDITIONAL_QUERY:\n      return [].concat(_toConsumableArray(state), _toConsumableArray(action.posts));\n\n    case SUBSCRIPTION:\n      return [action.post].concat(_toConsumableArray(state));\n\n    default:\n      return state;\n  }\n};\n\nexport default function AllPosts() {\n  var _useReducer = useReducer(reducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      posts = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      nextToken = _useState2[0],\n      setNextToken = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var getPosts = function getPosts(type) {\n    var nextToken,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.async(function getPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nextToken = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(listPostsSortedByTimestamp, {\n              type: \"post\",\n              sortDirection: 'DESC',\n              limit: 20,\n              nextToken: nextToken\n            })));\n\n          case 3:\n            res = _context.sent;\n            console.log(res);\n            dispatch({\n              type: type,\n              posts: res.data.listPostsSortedByTimestamp.items\n            });\n            setNextToken(res.data.listPostsSortedByTimestamp.nextToken);\n            setIsLoading(false);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getAdditionalPosts = function getAdditionalPosts() {\n    if (nextToken === null) return;\n    getPosts(ADDITIONAL_QUERY, nextToken);\n  };\n\n  useEffect(function () {\n    getPosts(INITIAL_QUERY);\n    var subscription = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n      next: function next(msg) {\n        console.log('allposts subscription fired');\n        var post = msg.value.data.onCreatePost;\n        dispatch({\n          type: SUBSCRIPTION,\n          post: post\n        });\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, []);\n  return React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(Sidebar, {\n    activeListItem: \"global-timeline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), React.createElement(PostList, {\n    isLoading: isLoading,\n    posts: posts,\n    getAdditionalPosts: getAdditionalPosts,\n    listHeaderTitle: 'Global Timeline',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/bhavan/Project/src/containers/AllPosts.js"],"names":["React","useState","useEffect","useReducer","API","graphqlOperation","listPostsSortedByTimestamp","onCreatePost","PostList","Sidebar","SUBSCRIPTION","INITIAL_QUERY","ADDITIONAL_QUERY","reducer","state","action","type","posts","post","AllPosts","dispatch","nextToken","setNextToken","isLoading","setIsLoading","getPosts","graphql","sortDirection","limit","res","console","log","data","items","getAdditionalPosts","subscription","subscribe","next","msg","value","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\r\n\r\n\r\nimport API, { graphqlOperation } from '@aws-amplify/api';\r\n\r\nimport { listPostsSortedByTimestamp } from '../graphql/queries';\r\nimport { onCreatePost } from '../graphql/subscriptions';\r\n\r\nimport PostList from '../components/PostLists';\r\nimport Sidebar from './Sidebar';\r\n\r\nconst SUBSCRIPTION = 'SUBSCRIPTION';\r\nconst INITIAL_QUERY = 'INITIAL_QUERY';\r\nconst ADDITIONAL_QUERY = 'ADDITIONAL_QUERY';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case INITIAL_QUERY:\r\n      return action.posts;\r\n    case ADDITIONAL_QUERY:\r\n      return [...state, ...action.posts]\r\n    case SUBSCRIPTION:\r\n      return [action.post, ...state]\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function AllPosts() {\r\n  const [posts, dispatch] = useReducer(reducer, []);\r\n  const [nextToken, setNextToken] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const getPosts = async (type, nextToken = null) => {\r\n    const res = await API.graphql(graphqlOperation(listPostsSortedByTimestamp, {\r\n      type: \"post\",\r\n      sortDirection: 'DESC',\r\n      limit: 20, //default = 10\r\n      nextToken: nextToken,\r\n    }));\r\n    console.log(res);\r\n    dispatch({ type: type, posts: res.data.listPostsSortedByTimestamp.items })\r\n    setNextToken(res.data.listPostsSortedByTimestamp.nextToken);\r\n    setIsLoading(false);\r\n  }\r\n\r\n  const getAdditionalPosts = () => {\r\n    if (nextToken === null) return; //Reached the last page\r\n    getPosts(ADDITIONAL_QUERY, nextToken);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPosts(INITIAL_QUERY);\r\n\r\n    const subscription = API.graphql(graphqlOperation(onCreatePost)).subscribe({\r\n      next: (msg) => {\r\n        console.log('allposts subscription fired')\r\n        const post = msg.value.data.onCreatePost;\r\n        dispatch({ type: SUBSCRIPTION, post: post });\r\n      }\r\n    });\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Sidebar \r\n        activeListItem='global-timeline'\r\n      />\r\n      <PostList\r\n        isLoading={isLoading}\r\n        posts={posts}\r\n        getAdditionalPosts={getAdditionalPosts}\r\n        listHeaderTitle={'Global Timeline'}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}